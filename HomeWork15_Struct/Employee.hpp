#pragma once

#include<string>
#include<vector>

/// Глобальные константы
const int _MIN_SALARY = 17500; // Минимальная зарплата
const int _MAX_SALARY = 250000; // Максимальная зарплата

/*
* \brief Структура "Работник"
* \details Для создания объектов "работник".
* Структура упакована по принципу уменьшения размера элементов и выровнена с помощью директивы препроцессора
*/
struct Employee {
#pragma pack(push, 1)
	std::string name_; // Имя сотрудника
	unsigned int salary_; // Зарплата
	unsigned short number_; // Уникальный номер сотрудника
	bool shift_; // Смена (true - дневная, false - ночная)
#pragma pack(pop)
};

/// Блок прототипов функций

/*
* \brief Перегруженная функция для вывода работников в консоль из вектора по значению ключа key
* \details В качестве ключа key передаём смену работника (true - дневная смена, false - ночная)
* Перегруженный экземпляр выводит в консоль весь переданный вектор
* Коллекция с работниками (ветор) передаётся по ссылке для предотвращения создания копии вектора
* Объект, передаваемый по ссылке константный для предотвращения случайной порчи данных
*/
void Print(std::vector<Employee>& const obj, bool key);
void Print(std::vector<Employee>& const obj);

/*
* \brief Функция для формирования вектора из трёх работников с максимальными зарплатами
* \details В качестве ключа key передаём смену работника (true - дневная смена, false - ночная)
* Функция работает с копией исходного вектора для предотвращения порчи данных
* Вектор с тремя работниками передаётся по ссылкам для предотвращения создания копии вектора
*/
void Max_Salary(std::vector<Employee> obj_source, std::vector<Employee>& obj_new, bool key);

/*
* \brief Функция для формирования вектора из трёх работников с минимальными зарплатами
* \details В качестве ключа key передаём смену работника (true - дневная смена, false - ночная)
* Функция работает с копией исходного вектора для предотвращения порчи данных
* Вектор с тремя работниками передаётся по ссылкам для предотвращения создания копии вектора
*/
void Min_Salary(std::vector<Employee> obj_source, std::vector<Employee>& obj_new, bool key);

/*
* \brief Функция для заполнения ветора исходными данными
* \details Все векторы передаются по ссылкам для предотвращения создания копии векторов
* Исходные данные (векторы Day и Night) передаваются константными для предотвращения случайной порчи данных
*/
void Fill_in(std::vector<Employee>& All, std::vector<Employee>& const Day, std::vector<Employee>& const Night);

/*
* \brief Функция для сортировки ветора сотрудников по убыванию (key = true) или возрастанию (key = false) зарплаты
* \details Вектор передаётся по ссылке для предотвращения создания копии вектора
*/
void Sort(std::vector<Employee>& All, bool key);